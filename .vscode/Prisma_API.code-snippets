{
	"バックエンドの基本的なAPI": {
		"prefix": "api_default",
		"body": [
			"import { PrismaClient } from \"@prisma/client\";",
			"",
			"const prisma = new PrismaClient();",
			"",
			"export async function POST(req: Request) {",
			"  try {",
			"    const body = await req.json();  // ここでフロントから送られるリクエストの中のbodyの部分をjson形式に変換してる.",
			"    const { user_identifier, email, password } = body;  // 受け取ったbodyを分割代入してる(分割代入は文字列の完全一致じゃないと分割で代入できない).",
			"",
			"    // 入力チェック（空ならエラー返す)",
			"    if (!user_identifier || !email || !password) { // 変数名の前に!をつけるとnillチェックできる.nillならtrue.",
			"      return new Response(",
			"        JSON.stringify({ error: \"すべての項目を入力してください\" }), //return new Response(JSON.stringigy({キー: 値}))を使うとjsonのbodyの部分を記述できてフロントに送れる.",
			"        { status: 400 }",
			"      );",
			"    }",
			"",
			"    // 処理内容(await prisma.users.create(...)を書いた瞬間に実行される. const 定数名 は結果を代入してるだけ)",
			"    const newUser = await prisma.users.create({",
			"      data: {",
			"        user_identifier,",
			"        email,",
			"        password,",
			"        created_at: new Date(),",
			"        updated_at: new Date(),",
			"      },",
			"    });",
			"",
			"    // 成功したらレスポンスとして新規ユーザーを返す",
			"    return new Response(JSON.stringify(newUser), { status: 201 });  // new Response()の第一引数がjsonのbodyになって、第二引数がオプション扱いでステータスとか入れてるだけ.",
			"  } catch (error) {",
			"    // catchの部分はエラーハンドリング",
			"    console.error(error);",
			"    return new Response(",
			"      JSON.stringify({ error: \"ユーザー登録中にエラーが発生しました\" }),",
			"      { status: 500 }",
			"    );",
			"  }",
			"}"
		],
		"description": "ユーザー登録APIの基本スニペット（コメント付き）"
	}
}